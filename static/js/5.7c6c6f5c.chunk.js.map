{"version":3,"sources":["../node_modules/reactstrap/es/ModalFooter.js","components/editReviewModal/editReviewModal.component.jsx","components/deleteReviewModal/deleteReviewModal.component.jsx","components/review/review.component.jsx","components/review/review.container.jsx","components/fanReviewModal/fanReviewModal.component.jsx","components/detailedFanReviews/detailedFanReviews.component.jsx","components/detailedMovieRatings/detailedMovieRatings.component.jsx","components/detailedMovieRatings/detailedMovieRatings.container.jsx","components/detailedMovieInfo/detailedMovieInfo.component.jsx","components/detailedMovieInfo/detailedMovieInfo.container.jsx","components/detailedMovie/detailedMovie.component.jsx","pages/singleMoviePage/singleMoviePage.component.jsx","components/withSpinner/withSpinner.component.jsx","components/formInput/formInput.component.jsx","components/validationMessage/validationMessage.component.jsx"],"names":["propTypes","tag","tagPropType","className","PropTypes","string","cssModule","object","ModalFooter","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps","EditMovieReview","state","modal","reviewText","fanScore","errorMessageDisplay","errorMessage","toggle","bind","handleOnChange","handleUpdateSubmit","this","setState","currState","e","target","name","value","length","imdbID","updateReviewStart","currentUser","id","token","window","sessionStorage","getItem","review","userID","fanscore","reviewID","label","Button","onClick","Modal","isOpen","ModalHeader","ModalBody","message","color","type","onChange","FormGroup","Label","for","Input","Component","DeleteReviewModal","handleDeleteSubmit","deleteReviewStart","Title","Review","username","userid","toUpperCase","mapStateToProps","createStructuredSelector","isLoading","selectIsMovieListLoading","ReviewContainer","connect","WithSpinner","FanReviewModal","handleReviewSubmit","submitMovieReviewStart","score","buttonLabel","DetailedFanReviews","displayReviewButton","displayReviews","moreReviewInfo","find","sortedReviews","sort","a","b","parseFloat","map","key","DetailedMovieRatings","imdbRating","audienceRating","calculateImdbRating","calculateAudienceRating","calculateAudienceReviewLength","calculatePluralTense","determineRatingImage","timer","mounted","clearTimeout","audienceScore","setTimeout","toFixed","averageFanScore","fanreviews","imgSrc","imdbVotes","style","width","height","strokeWidth","styles","buildStyles","rotation","strokeLinecap","pathTransitionDuration","pathColor","textColor","trailColor","backgroundColor","marginTop","src","alt","fontSize","DetailedMovieRatingsContainer","DetailedMovieInfo","Poster","Rated","Genre","Director","Actors","Plot","Production","Awards","DetailedMovieInfoContainer","DetailedMovie","SingleMoviePage","match","params","getReviewsByMovieIDStart","movieList","movie","selectCurrentUser","selectSingleMoviePage","dispatch","reviewObj","WrappedComponent","FormInput","placeholder","onKeyPress","ValidationMessage","colorCode"],"mappings":"0NAAA,4EAMIA,EAAY,CACdC,IAAKC,IACLC,UAAWC,IAAUC,OACrBC,UAAWF,IAAUG,QAMnBC,EAAc,SAAqBC,GACrC,IAAIN,EAAYM,EAAMN,UAClBG,EAAYG,EAAMH,UAClBI,EAAMD,EAAMR,IACZU,EAAaC,YAA8BH,EAAO,CAAC,YAAa,YAAa,QAE7EI,EAAUC,YAAgBC,IAAWZ,EAAW,gBAAiBG,GACrE,OAAOU,IAAMC,cAAcP,EAAKQ,YAAS,GAAIP,EAAY,CACvDR,UAAWU,MAIfL,EAAYR,UAAYA,EACxBQ,EAAYW,aAjBO,CACjBlB,IAAK,OAiBQO,O,2WCiFAY,E,kDAvGX,WAAYX,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,CACTC,OAAO,EACPC,WAAYd,EAAMc,WAClBC,SAAUf,EAAMe,SAChBC,oBAAqB,KACrBC,aAAc,MAElB,EAAKC,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBACtB,EAAKE,mBAAqB,EAAKA,mBAAmBF,KAAxB,gBAXX,E,qDAcT,IAAD,OACLG,KAAKC,UAAS,SAACC,GAAc,IAAD,EACxB,OAAO,EAAP,CACIX,OAAQW,EAAUX,MAClBG,oBAAqB,MAFzB,oCAGyB,MAHzB,2BAIgB,EAAKhB,MAAMc,YAJ3B,yBAKc,EAAKd,MAAMe,UALzB,O,qCAUOU,GAAI,IAAD,EACUA,EAAEC,OAAlBC,EADM,EACNA,KAAMC,EADA,EACAA,MACdN,KAAKC,SAAL,eACKI,EAAOC,M,2CAKZ,GAAGN,KAAKtB,MAAMc,aAAeQ,KAAKV,MAAME,YAAcQ,KAAKtB,MAAMe,WAAaO,KAAKV,MAAMG,SACrFO,KAAKC,SAAS,CAACP,qBAAqB,EAAMC,aAAc,uCACrD,GAAIK,KAAKV,MAAME,WAAWe,OAAS,EACtCP,KAAKC,SAAS,CAACP,qBAAqB,EAAMC,aAAc,6CACrD,GAAGK,KAAKV,MAAME,WAAWe,OAAS,IACrCP,KAAKC,SAAS,CAACP,qBAAqB,EAAMC,aAAc,qDACrD,CACHK,KAAKC,SAAS,CAACP,oBAAqB,KAAMC,aAAc,OADrD,MAE8BK,KAAKV,MAA9BE,EAFL,EAEKA,WAAYC,EAFjB,EAEiBA,SAFjB,EAGkDO,KAAKtB,MAAnD8B,EAHJ,EAGIA,OAAQC,EAHZ,EAGYA,kBAAmBC,EAH/B,EAG+BA,YAAaC,EAH5C,EAG4CA,GACzCC,EAAQC,OAAOC,eAAeC,QAAQ,SAS5CN,EAR2B,CACvBO,OAAQxB,EACRyB,OAAQP,EAAYC,GACpBO,SAAUzB,EACVe,OAAQA,EACRI,MAAOA,EACPO,SAAUR,IAGdX,KAAKJ,Y,+BAKH,IACCwB,EAASpB,KAAKtB,MAAd0C,MACP,OACI,6BACI,kBAACC,EAAA,EAAD,CAAQC,QAAStB,KAAKJ,QAAtB,IAAgCwB,EAAhC,KACA,kBAACG,EAAA,EAAD,CAAOC,OAAQxB,KAAKV,MAAMC,MAAOK,OAAQI,KAAKJ,QAC1C,kBAAC6B,EAAA,EAAD,CAAa7B,OAAQI,KAAKJ,QAA1B,eACA,kBAAC8B,EAAA,EAAD,KACI,8BACK1B,KAAKV,MAAMI,oBAAsB,kBAAC,IAAD,CAC9BiC,QAAS3B,KAAKV,MAAMK,aACpBiC,MAAM,YACL,GACL,kBAAC,IAAD,CACIjB,GAAG,aACHS,MAAM,yBACNf,KAAK,aACLwB,KAAK,WACLC,SAAU9B,KAAKF,eACfQ,MAAON,KAAKV,MAAME,aAEtB,kBAACuC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,IAAI,iBAAX,UACA,kBAACC,EAAA,EAAD,CAAOL,KAAK,SAASxB,KAAK,WAAWM,GAAG,SAASmB,SAAU9B,KAAKF,eAAgBQ,MAAON,KAAKV,MAAMG,UAC9F,4BAAQa,MAAO,GAAf,KACA,4BAAQA,MAAO,GAAf,KACA,4BAAQA,MAAO,GAAf,KACA,4BAAQA,MAAO,GAAf,KACA,4BAAQA,MAAO,GAAf,SAKhB,kBAAC7B,EAAA,EAAD,KACI,kBAAC4C,EAAA,EAAD,CAAQO,MAAM,UAAUN,QAAStB,KAAKD,oBAAtC,UAA0E,IAC1E,kBAACsB,EAAA,EAAD,CAAQO,MAAM,YAAYN,QAAStB,KAAKJ,QAAxC,iB,GA/FMX,IAAMkD,WCiDrBC,G,yDAlDX,WAAY1D,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,CACTC,OAAO,GAEX,EAAKK,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKwC,mBAAqB,EAAKA,mBAAmBxC,KAAxB,gBANX,E,qDAUfG,KAAKC,UAAS,SAACC,GACX,MAAO,CACHX,OAAQW,EAAUX,Y,2CAKR,IAAD,EACoCS,KAAKtB,MAAnD8B,EADU,EACVA,OAAQE,EADE,EACFA,YAAaC,EADX,EACWA,GAAI2B,EADf,EACeA,kBAC1B1B,EAAQC,OAAOC,eAAeC,QAAQ,SAO5CuB,EANwB,CACpBrB,OAAQP,EAAYC,GACpBH,OAAQA,EACRI,MAAOA,EACPO,SAAUR,IAGdX,KAAKJ,W,+BAGC,IAAD,EACkBI,KAAKtB,MAArB0C,EADF,EACEA,MAAOmB,EADT,EACSA,MACd,OACI,6BACI,kBAAClB,EAAA,EAAD,CAAQC,QAAStB,KAAKJ,QAAtB,IAAgCwB,EAAhC,KACA,kBAACG,EAAA,EAAD,CAAOC,OAAQxB,KAAKV,MAAMC,MAAOK,OAAQI,KAAKJ,QAC1C,kBAAC6B,EAAA,EAAD,CAAa7B,OAAQI,KAAKJ,QAA1B,eACA,kBAAC8B,EAAA,EAAD,wDACoD,gCAASa,GAD7D,MAGA,kBAAC9D,EAAA,EAAD,KACI,kBAAC4C,EAAA,EAAD,CAAQO,MAAM,UAAUN,QAAStB,KAAKqC,oBAAtC,UAA0E,IAC1E,kBAAChB,EAAA,EAAD,CAAQO,MAAM,YAAYN,QAAStB,KAAKJ,QAAxC,iB,GA3CQX,IAAMkD,YCiCvBK,EA/BA,SAAC,GAAgB,IAAZ9D,EAAW,oBAChBsC,EAAmDtC,EAAnDsC,OAAQE,EAA2CxC,EAA3CwC,SAAUuB,EAAiC/D,EAAjC+D,SAAUC,EAAuBhE,EAAvBgE,OAAQhC,EAAehC,EAAfgC,YAC3C,OACI,yBAAKtC,UAAU,UACX,yBAAKA,UAAU,cAAf,IAA6B,0BAAMA,UAAU,YAAYqE,EAASE,eAAlE,KACA,2BAAG,0BAAMvE,UAAU,aAAhB,WAAH,IAA8C,0BAAMA,UAAU,YAAY8C,EAA5B,MAA9C,KACA,yBAAK9C,UAAU,eACX,2BAAG,0BAAMA,UAAU,cAAnB,IAAwC4C,EAAxC,IAAgD,0BAAM5C,UAAU,gBAEpE,yBAAKA,UAAU,UACVsE,IAAWhC,EAAYC,GACpB,yBAAKvC,UAAU,eACP,kBAAC,EAAD,iBACQM,EADR,CAEIc,WAAYwB,EACZvB,SAAUyB,EACVE,MAAM,UAEV,kBAAC,EAAD,iBACQ1C,EADR,CAEI0C,MAAM,aAGnB,iC,QCvBjBwB,EAAkBC,YAAyB,CAC7CC,UAAWC,MAKAC,EAFSC,YAAQL,EAARK,CAAyBC,YAAYV,EAAQ,UC2FtDW,E,kDA/FX,WAAYzE,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,CACTC,OAAO,EACPC,WAAY,GACZC,SAAU,IACVC,oBAAqB,KACrBC,aAAc,MAElB,EAAKC,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBACtB,EAAKuD,mBAAqB,EAAKA,mBAAmBvD,KAAxB,gBAXX,E,qDAefG,KAAKC,UAAS,SAACC,GACX,MAAO,CACHX,OAAQW,EAAUX,Y,qCAKfY,GAAI,IAAD,EACUA,EAAEC,OAAlBC,EADM,EACNA,KAAMC,EADA,EACAA,MACdN,KAAKC,SAAL,eACKI,EAAOC,M,2CAKZ,GAAIN,KAAKV,MAAME,WAAWe,OAAS,EAC/BP,KAAKC,SAAS,CAACP,qBAAqB,EAAMC,aAAc,6CACrD,GAAGK,KAAKV,MAAME,WAAWe,OAAS,IACrCP,KAAKC,SAAS,CAACP,qBAAqB,EAAMC,aAAc,qDACrD,CACHK,KAAKC,SAAS,CAACP,oBAAqB,KAAMC,aAAc,OADrD,MAE8BK,KAAKV,MAA9BE,EAFL,EAEKA,WAAYC,EAFjB,EAEiBA,SAFjB,EAGoDO,KAAKtB,MAArD8B,EAHJ,EAGIA,OAAQ6C,EAHZ,EAGYA,uBAAwB3C,EAHpC,EAGoCA,YACjCE,EAAQC,OAAOC,eAAeC,QAAQ,SAQ5CsC,EAPoB,CAChBrC,OAAQxB,EACRyB,OAAQP,EAAYC,GACpB2C,MAAO7D,EACPe,OAAQA,EACRI,MAAOA,IAGXZ,KAAKJ,Y,+BAIN,IAAD,EAC6BI,KAAKtB,MAAhC6E,EADF,EACEA,YAAanF,EADf,EACeA,UACrB,OACI,6BACE,kBAACiD,EAAA,EAAD,CAAQO,MAAM,UAAUN,QAAStB,KAAKJ,QAAS2D,GAC/C,kBAAChC,EAAA,EAAD,CAAOC,OAAQxB,KAAKV,MAAMC,MAAOK,OAAQI,KAAKJ,OAAQxB,UAAWA,GAC/D,kBAACqD,EAAA,EAAD,CAAa7B,OAAQI,KAAKJ,QAA1B,eACA,kBAAC8B,EAAA,EAAD,KACI,8BACK1B,KAAKV,MAAMI,oBAAsB,kBAAC,IAAD,CAC1BiC,QAAS3B,KAAKV,MAAMK,aACpBiC,MAAM,YACT,GACL,kBAAC,IAAD,CACIjB,GAAG,aACHS,MAAM,yBACNf,KAAK,aACLwB,KAAK,WACLC,SAAU9B,KAAKF,iBAGnB,kBAACiC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,IAAI,iBAAX,UACA,kBAACC,EAAA,EAAD,CAAOL,KAAK,SAASxB,KAAK,WAAWM,GAAG,SAASmB,SAAU9B,KAAKF,gBAC5D,4BAAQQ,MAAO,GAAf,KACA,4BAAQA,MAAO,GAAf,KACA,4BAAQA,MAAO,GAAf,KACA,4BAAQA,MAAO,GAAf,KACA,4BAAQA,MAAO,GAAf,SAMhB,kBAAC7B,EAAA,EAAD,KACE,kBAAC4C,EAAA,EAAD,CAAQO,MAAM,UAAUN,QAAStB,KAAKoD,oBAAtC,UAA0E,IAC1E,kBAAC/B,EAAA,EAAD,CAAQO,MAAM,YAAYN,QAAStB,KAAKJ,QAAxC,iB,GAxFeX,IAAMkD,WCuDpBqB,E,kDAtDX,WAAY9E,GAAQ,IAAD,8BACf,cAAMA,IACD+E,oBAAsB,EAAKA,oBAAoB5D,KAAzB,gBAC3B,EAAK6D,eAAiB,EAAKA,eAAe7D,KAApB,gBAHP,E,kEAMI,IAAD,EACoBG,KAAKtB,MAApCiF,EADW,EACXA,eAAgBjD,EADL,EACKA,YACvB,OAAGiD,GAC6BA,EAAeC,MAAK,SAAA5C,GAAM,OAAIA,EAAO0B,SAAWhC,EAAYC,MAIjF,GAEH,6BAAK,kBAAC,EAAD,eAAgB4C,YAAY,kBAAkBnF,UAAS,gBAAsB4B,KAAKtB,W,uCAGjF,IAAD,OACNiF,EAAkB3D,KAAKtB,MAAvBiF,eAEP,GAAGA,EAAgB,CACf,IAAME,EAAgBF,EAAeG,MAAK,SAACC,EAAEC,GACzC,OAAOC,WAAWF,EAAEpD,IAAMsD,WAAWD,EAAErD,OAW3C,OARI,yBAAKvC,UAAU,OACVyF,EAAcK,KAAI,SAAAlD,GAAM,OACrB,yBAAK5C,UAAU,qBAAqB+F,IAAKnD,EAAO0B,QAC5C,kBAAC,EAAD,iBAAqB1B,EAAY,EAAKtC,MAAtC,CAA6CyF,IAAKnD,EAAO0B,eAQ7E,OADU,uBAAGtE,UAAU,cAAb,mC,+BAKV,OACI,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,cACX,2CACC4B,KAAKyD,uBAEV,6BACCzD,KAAK0D,sB,GAjDYzE,IAAMkD,W,iBC2KzBiC,G,yDAvKX,WAAY1F,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,CACT+E,WAAY,EACZC,eAAgB,GAEpB,EAAKC,oBAAsB,EAAKA,oBAAoB1E,KAAzB,gBAC3B,EAAK2E,wBAA0B,EAAKA,wBAAwB3E,KAA7B,gBAC/B,EAAK4E,8BAAgC,EAAKA,8BAA8B5E,KAAnC,gBACrC,EAAK6E,qBAAuB,EAAKA,qBAAqB7E,KAA1B,gBAC5B,EAAK8E,qBAAuB,EAAKA,qBAAqB9E,KAA1B,gBAC5B,EAAK+E,MAAQ,EAAKA,MAAM/E,KAAX,gBAXE,E,gEAefG,KAAK6E,SAAU,EACf7E,KAAK4E,U,6CAIL5E,KAAK6E,SAAU,EACfC,aAAa9E,KAAK4E,S,8BAGb,IAAD,OACGP,EAAcrE,KAAKtB,MAAnB2F,WACDU,EAAgB/E,KAAKwE,0BAC3BQ,YAAW,WACN,EAAKH,SACF,EAAK5E,SAAS,CAACoE,YAAaJ,WAAWI,GAAY,GAAK,KAAKY,QAAQ,GACtDX,eAAgBS,MAEpC,K,4CAGgB,IACZV,EAAcrE,KAAKtB,MAAnB2F,WACP,OAAQJ,WAAWI,GAAY,GAAK,KAAKY,QAAQ,K,gDAG1B,IAChBC,EAAoBlF,KAAKtB,MAAzBwG,gBACP,OAAGA,GAC0BjB,WAAWiB,GAAiB,EAAI,KAAKD,QAAQ,GAGnE,I,sDAGsB,IACtBtB,EAAkB3D,KAAKtB,MAAvBiF,eACP,GAAGA,EAAgB,CACf,IACQwB,EADKxB,EAAe,GACpBwB,WACR,OAAGA,EAAW5E,OACJ,GAAN,OAAU4E,EAAW5E,QAI7B,OAAO,O,6CAGa,IACboD,EAAkB3D,KAAKtB,MAAvBiF,eACP,OAAGA,EAG0B,IAFZA,EAAe,GACpBwB,WACM5E,OACJ,aAEJ,cAEH,O,6CAGa,IAEhB6E,EADGF,EAAmBlF,KAAKtB,MAAxBwG,gBAEP,GAAGA,EAAiB,CAChB,IAAM5B,GAASW,WAAWiB,GAAiB,EAAI,KAAKD,QAAQ,GAc5D,OAbG3B,GAAS,GAAKA,EAAQ,GAGrB8B,EAAS,iEACF9B,GAAS,IAAMA,EAAQ,GAG9B8B,EAAS,iEACF9B,GAAS,KAGhB8B,EAAS,gEAENA,EAKX,OADAA,EAAQ,iE,+BAIF,IAAD,EAC+BpF,KAAKtB,MAAlCiF,EADF,EACEA,eAAgB0B,EADlB,EACkBA,UACvB,OACI,yBAAKjH,UAAU,wBACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,UACX,yBAAKkH,MAAO,CAACC,MAAO,QAASC,OAAQ,UACjC,kBAAC,IAAD,CACIlF,MAAON,KAAKV,MAAM+E,WAClBoB,YAAc,GACdC,OAAQC,YAAY,CAChBC,SAAU,EACVC,cAAe,QACfC,uBAAwB,EACxBC,UAAU,oBAAD,OAAsB/F,KAAKV,MAAM+E,WAAa,IAA9C,KACT2B,UAAW,OACXC,WAAY,UACZC,gBAAiB,aAKrB,yBAAKZ,MAAO,CAAEC,MAAO,GAAIY,UAAW,GAAIC,IAAI,+DAA+DC,IAAI,WAC/G,yBAAKf,MAAO,CAAEgB,SAAU,GAAIH,WAAY,IACnCnG,KAAKV,MAAM+E,WADhB,QAMZ,yBAAKjG,UAAU,SAAQ,0BAAMA,UAAU,aAAaiH,GAApD,cAEJ,yBAAKjH,UAAU,YACX,yBAAKA,UAAU,UACX,yBAAKkH,MAAO,CAACC,MAAO,QAASC,OAAQ,UACjC,kBAAC,IAAD,CAEIlF,MAAON,KAAKV,MAAMgF,eAClBmB,YAAc,GACdC,OAAQC,YAAY,CAChBC,SAAU,EACVC,cAAe,QACfC,uBAAwB,EACxBC,UAAU,sBAAD,OAAwB/F,KAAKwE,0BAA4B,IAAzD,KACTwB,UAAW,OACXC,WAAY,UACZC,gBAAiB,aAGrB,yBAAKZ,MAAO,CAAEC,MAAO,GAAIY,UAAW,GAAIC,IAAG,UAAKpG,KAAK2E,wBAA0B0B,IAAI,WACnF,yBAAKjI,UAAU,UAAUkH,MAAO,CAAEgB,SAAU,GAAIH,UAAW,IACnB,IAAnCnG,KAAKwE,0BAAkC,GAAKxE,KAAKwE,0BAA4B,QAK9F,yBAAKpG,UAAU,SACVuF,EAAiB,6BAAK,0BAAMvF,UAAU,sBAAsB4B,KAAKyE,iCAAhD,IAA0FzE,KAAK0E,wBAA+B,qB,GA/JzIzF,IAAMkD,YCDnCS,EAAkBC,YAAyB,CAC7CC,UAAWC,MAKAwD,EAFuBtD,YAAQL,EAARK,CAAyBC,YAAYkB,EAAsB,UCYlFoC,G,OApBW,SAAC,GAAgB,IAAZ9H,EAAW,oBAC/B+H,EAAoE/H,EAApE+H,OAAQC,EAA4DhI,EAA5DgI,MAAOC,EAAqDjI,EAArDiI,MAAOC,EAA8ClI,EAA9CkI,SAAUC,EAAoCnI,EAApCmI,OAAQC,EAA4BpI,EAA5BoI,KAAMC,EAAsBrI,EAAtBqI,WAAYC,EAAUtI,EAAVsI,OACjE,OACI,yBAAK5I,UAAU,qBACX,yBAAKA,UAAU,aACX,yBAAKgI,IAAKK,EAAQJ,IAAI,QAAQd,MAAM,WAExC,yBAAKnH,UAAU,WACX,2BAAG,0BAAMA,UAAU,aAAhB,iBAAH,IAAqDwI,GACrD,2BAAG,0BAAMxI,UAAU,aAAhB,WAAH,IAA+CuI,GAC/C,2BAAG,0BAAMvI,UAAU,aAAhB,eAAH,KAAoD2I,GACpD,2BAAG,0BAAM3I,UAAU,aAAhB,UAAH,KAA+CsI,GAC/C,2BAAG,0BAAMtI,UAAU,aAAhB,WAAH,KAAgD4I,GAChD,2BAAG,0BAAM5I,UAAU,aAAhB,WAAH,KAAgDyI,GAChD,2BAAG,0BAAMzI,UAAU,aAAhB,SAAH,KAA8C0I,OCXxDlE,EAAkBC,YAAyB,CAC7CC,UAAWC,MAKAkE,EAFoBhE,YAAQL,EAARK,CAAyBC,YAAYsD,EAAmB,UCM5EU,EAVO,SAAC,GAAgB,IAAZxI,EAAW,oBAClC,OACI,yBAAKN,UAAU,iBACX,kBAAC,EAAkCM,GACnC,kBAAC,EAA+BA,GAChC,kBAAC,EAAuBA,KCD9ByI,E,kDACF,WAAYzI,GAAQ,uCACVA,G,gEAGW,IAAD,EAC0DsB,KAAKtB,MAAvD8B,EADR,EACT4G,MAAQC,OAAS7G,OAAS8G,EADjB,EACiBA,yBAA0B5G,EAD3C,EAC2CA,YACrDE,EAAQC,OAAOC,eAAeC,QAAQ,SAM5CuG,EALkB,CACdrG,OAAQP,EAAYC,GACpBH,OAAQA,EACRI,MAAOA,M,+BAKN,IAAD,OACI2G,EAAavH,KAAKtB,MAAlB6I,UACR,OACI,yBAAKnJ,UAAU,mBACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,8BACX,yBAAKA,UAAU,UACdmJ,EAAUrD,KAAK,SAAAsD,GACZ,OAAO,kBAAC,EAAD,iBAAmBA,EAAW,EAAK9I,MAAnC,CAA0CyF,IAAKqD,EAAMhH,qB,GAxB1DvB,IAAMkD,WA2C9BS,EAAkBC,YAAyB,CAC7CnC,YAAa+G,IACbF,UAAWG,MAGAzE,sBAAQL,GAdI,SAAC+E,GACxB,MAAO,CACHL,yBAA0B,SAACM,GAAD,OAAeD,EAASL,YAAyBM,KAC3EvE,uBAAwB,SAACrC,GAAD,OAAY2G,EAAStE,YAAuBrC,KACpEP,kBAAmB,SAACmH,GAAD,OAAeD,EAASlH,YAAkBmH,KAC7DtF,kBAAmB,SAACsF,GAAD,OAAeD,EAASrF,YAAkBsF,QAStD3E,CAA6CkE,I,0ECxC7CjE,IAdK,SAAC2E,EAAkBrC,GAWnC,OAV6B,SAAC,GAA2B,IAA1B1C,EAAyB,EAAzBA,UAAcpE,EAAW,6BAC7CkD,EAASlD,EAATkD,MACP,OAAOkB,EACH,yBAAK1E,UAAU,kBAAkBkH,MAAO,CAACE,OAAQA,IAC7C,kBAAC,IAAD,CAASF,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAAU5D,MAAOA,KAG9D,kBAACiG,EAAqBnJ,M,gCCZlC,4CAceoJ,IAXG,SAAC,GAAuE,IAAtEnH,EAAqE,EAArEA,GAAIS,EAAiE,EAAjEA,MAAOf,EAA0D,EAA1DA,KAAMwB,EAAoD,EAApDA,KAAMkG,EAA8C,EAA9CA,YAAajG,EAAiC,EAAjCA,SAAUxB,EAAuB,EAAvBA,MAAO0H,EAAgB,EAAhBA,WACrE,OACI,yBAAK5J,UAAU,aACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO6D,IAAKtB,GAAKS,GACjB,kBAAC,IAAD,CAAOS,KAAMA,EAAMxB,KAAMA,EAAMM,GAAIA,EAAIoH,YAAaA,EAAajG,SAAUA,EAAUxB,MAAOA,EAAO0H,WAAYA,Q,gCCR/H,0BAeeC,IAZW,SAAC,GAAgB,IAAZvJ,EAAW,oBAC/BwJ,EAAsBxJ,EAAtBwJ,UAAWvG,EAAWjD,EAAXiD,QAClB,OACI,yBAAKvD,UAAU,qBAGX,yBAAKgI,IAAI,iEAAiEC,IAAI,YAC9E,uBAAGf,MAAO,CAAC1D,MAAM,GAAD,OAAKsG,KAAevG,M","file":"static/js/5.7c6c6f5c.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar ModalFooter = function ModalFooter(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'modal-footer'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nModalFooter.propTypes = propTypes;\nModalFooter.defaultProps = defaultProps;\nexport default ModalFooter;","import React from 'react';\nimport './editReviewModal.styles.scss';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, FormGroup, Label, Input} from 'reactstrap';\nimport FormInput from '../formInput/formInput.component';\nimport ValidationMessage from '../validationMessage/validationMessage.component';\n\nclass EditMovieReview extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            modal: false,\n            reviewText: props.reviewText,\n            fanScore: props.fanScore,\n            errorMessageDisplay: null,\n            errorMessage: null\n        }\n        this.toggle = this.toggle.bind(this)\n        this.handleOnChange = this.handleOnChange.bind(this);\n        this.handleUpdateSubmit = this.handleUpdateSubmit.bind(this);\n    }\n\n    toggle() {\n        this.setState((currState) =>{\n            return {\n                modal: !currState.modal,\n                errorMessageDisplay: null,\n                errorMessageDisplay: null,\n                reviewText: this.props.reviewText,\n                fanScore: this.props.fanScore\n            }\n        })\n    }\n\n    handleOnChange(e) {\n        const { name, value } = e.target;\n        this.setState({\n            [name]: value\n        })\n    }\n\n    handleUpdateSubmit() {\n        if(this.props.reviewText === this.state.reviewText && this.props.fanScore === this.state.fanScore) {\n            this.setState({errorMessageDisplay: true, errorMessage: \"You did not make any changes.\"})\n        } else if (this.state.reviewText.length < 5 ) {\n            this.setState({errorMessageDisplay: true, errorMessage: \"You need a minimum of 5 characters.\"})\n        } else if(this.state.reviewText.length > 500 ) {\n            this.setState({errorMessageDisplay: true, errorMessage: \"You went over the maximum of 500 characters.\"})\n        } else {\n            this.setState({errorMessageDisplay: null, errorMessage: null})\n            const { reviewText, fanScore } = this.state;\n            const {imdbID, updateReviewStart, currentUser, id} = this.props;\n            const token = window.sessionStorage.getItem('token');\n            const updatedReviewObjDB = {\n                review: reviewText,\n                userID: currentUser.id,\n                fanscore: fanScore,\n                imdbID: imdbID,\n                token: token,\n                reviewID: id\n            }  \n            updateReviewStart(updatedReviewObjDB)\n            this.toggle();\n        }\n        \n    }\n\n    render() {\n        const {label} = this.props;\n        return(\n            <div>\n                <Button onClick={this.toggle}> {label} </Button>\n                <Modal isOpen={this.state.modal} toggle={this.toggle} >\n                    <ModalHeader toggle={this.toggle}>Your Review</ModalHeader>\n                    <ModalBody>\n                        <form>\n                            {this.state.errorMessageDisplay ? <ValidationMessage \n                                message={this.state.errorMessage}\n                                color='#ffa62b'\n                            /> : ''}\n                            <FormInput \n                                id='reviewText'\n                                label='Write Your Review Here'\n                                name='reviewText'\n                                type='textarea'\n                                onChange={this.handleOnChange}\n                                value={this.state.reviewText}\n                            />\n                            <FormGroup>\n                                <Label for=\"exampleSelect\">Rate: </Label>\n                                <Input type=\"select\" name=\"fanScore\" id=\"select\" onChange={this.handleOnChange} value={this.state.fanScore}>\n                                    <option value={1}>1</option>\n                                    <option value={2}>2</option>\n                                    <option value={3}>3</option>\n                                    <option value={4}>4</option>\n                                    <option value={5}>5</option>\n                                </Input>\n                            </FormGroup>\n                        </form>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button color=\"warning\" onClick={this.handleUpdateSubmit}>Update</Button>{' '}\n                        <Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>\n                    </ModalFooter>\n                </Modal>\n            </div>\n        )\n    }\n}\n\n\nexport default EditMovieReview;","import React from 'react';\nimport './deleteReviewModal.styles.scss';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\nclass DeleteReviewModal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            modal: false,\n        }\n        this.toggle = this.toggle.bind(this)\n        this.handleDeleteSubmit = this.handleDeleteSubmit.bind(this);\n    }\n\n    toggle() {\n        this.setState((currState) =>{\n            return {\n                modal: !currState.modal\n            }\n        })\n    }\n\n    handleDeleteSubmit() {\n        const {imdbID, currentUser, id, deleteReviewStart} = this.props;\n        const token = window.sessionStorage.getItem('token');\n        const deleteReviewObj = {\n            userID: currentUser.id,\n            imdbID: imdbID,\n            token: token,\n            reviewID: id\n        } \n        deleteReviewStart(deleteReviewObj)\n        this.toggle();\n    }\n\n    render() {\n        const {label, Title} = this.props;\n        return(\n            <div>\n                <Button onClick={this.toggle}> {label} </Button>\n                <Modal isOpen={this.state.modal} toggle={this.toggle} >\n                    <ModalHeader toggle={this.toggle}>Your Review</ModalHeader>\n                    <ModalBody>\n                        Are you sure you want to delete your review for <strong>{Title}</strong> ?\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button color=\"warning\" onClick={this.handleDeleteSubmit}>Delete</Button>{' '}\n                        <Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>\n                    </ModalFooter>\n                </Modal>\n            </div>\n        )\n    }\n}\n\nexport default DeleteReviewModal;","import React from 'react';\nimport './review.styles.scss';\nimport EditReviewModal from '../editReviewModal/editReviewModal.component';\nimport DeleteReviewModal from '../deleteReviewModal/deleteReviewModal.component';\n\n\nconst Review = ({...props}) => {\n        const {review, fanscore, username, userid, currentUser} = props;\n        return(\n            <div className='Review'>\n                <div className='text-right'> <span className='username'>{username.toUpperCase()}</span> </div> \n                <p><span className='bold-text'>Scored:</span> <span className='username'>{fanscore}/5</span> </p> \n                <div className='review-text'>\n                    <p><span className='bold-text'></span> {review} <span className='bold-text'></span></p>\n                </div>   \n                <div className='footer'>\n                    {userid === currentUser.id ? (\n                        <div className='edit-delete'>\n                                <EditReviewModal\n                                    {...props}\n                                    reviewText={review}\n                                    fanScore={fanscore}\n                                    label='Edit'\n                                />                          \n                                <DeleteReviewModal \n                                    {...props}\n                                    label='Delete'\n                                />\n                        </div>\n                    ): <div></div>}  \n                </div>  \n            </div>\n        )\n}\n\n\n\nexport default Review;","import { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectIsMovieListLoading} from '../../redux/movie/movie.selectors'\nimport Review from './review.component';\nimport WithSpinner from '../withSpinner/withSpinner.component';\n\nconst mapStateToProps = createStructuredSelector({\n    isLoading: selectIsMovieListLoading\n})\n\nconst ReviewContainer = connect(mapStateToProps)(WithSpinner(Review, '200px'))\n\nexport default ReviewContainer;","import React, { useState } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, FormGroup, Label, Input} from 'reactstrap';\nimport FormInput from '../formInput/formInput.component';\nimport ValidationMessage from '../validationMessage/validationMessage.component';\n\nclass FanReviewModal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            modal: false,\n            reviewText: '',\n            fanScore: \"1\",\n            errorMessageDisplay: null,\n            errorMessage: null\n        }\n        this.toggle = this.toggle.bind(this)\n        this.handleOnChange = this.handleOnChange.bind(this);\n        this.handleReviewSubmit = this.handleReviewSubmit.bind(this);\n    }\n\n    toggle() {\n        this.setState((currState) =>{\n            return {\n                modal: !currState.modal\n            }\n        })\n    }\n\n    handleOnChange(e) {\n        const { name, value } = e.target;\n        this.setState({\n            [name]: value\n        })\n    }\n\n    handleReviewSubmit() {\n        if (this.state.reviewText.length < 5 ) {\n            this.setState({errorMessageDisplay: true, errorMessage: \"You need a minimum of 5 characters.\"})                                                                                                                                                                                                              \n        } else if(this.state.reviewText.length > 500 ) {\n            this.setState({errorMessageDisplay: true, errorMessage: \"You went over the maximum of 500 characters.\"})\n        } else {\n            this.setState({errorMessageDisplay: null, errorMessage: null})\n            const { reviewText, fanScore } = this.state;\n            const {imdbID, submitMovieReviewStart, currentUser } = this.props;\n            const token = window.sessionStorage.getItem('token');\n            const reviewObjDB = {\n                review: reviewText,\n                userID: currentUser.id,\n                score: fanScore,\n                imdbID: imdbID,\n                token: token\n            }\n            submitMovieReviewStart(reviewObjDB)\n            this.toggle();\n        }\n    }\n\n  render(){\n    const { buttonLabel, className } = this.props;\n    return (\n        <div>\n          <Button color=\"warning\" onClick={this.toggle}>{buttonLabel}</Button>\n          <Modal isOpen={this.state.modal} toggle={this.toggle} className={className}>\n            <ModalHeader toggle={this.toggle}>Your Review</ModalHeader>\n            <ModalBody>\n                <form>\n                    {this.state.errorMessageDisplay ? <ValidationMessage \n                            message={this.state.errorMessage}\n                            color='#ffa62b'\n                    /> : ''}\n                    <FormInput \n                        id='reviewText'\n                        label='Write Your Review Here'\n                        name='reviewText'\n                        type='textarea'\n                        onChange={this.handleOnChange}\n                    />\n      \n                    <FormGroup>\n                        <Label for=\"exampleSelect\">Rate: </Label>\n                        <Input type=\"select\" name=\"fanScore\" id=\"select\" onChange={this.handleOnChange}>\n                            <option value={1}>1</option>\n                            <option value={2}>2</option>\n                            <option value={3}>3</option>\n                            <option value={4}>4</option>\n                            <option value={5}>5</option>\n                        </Input>\n                    </FormGroup>\n          \n                </form>\n            </ModalBody>\n            <ModalFooter>\n              <Button color=\"warning\" onClick={this.handleReviewSubmit}>Submit</Button>{' '}\n              <Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>\n            </ModalFooter>\n          </Modal>\n        </div>\n      );\n  }\n}\n\nexport default FanReviewModal;","import React from 'react';\nimport './detailedFanReviews.styles.scss';\nimport ReviewContainer from '../review/review.container';\nimport FanReviewModal  from '../fanReviewModal/fanReviewModal.component';\n\nclass DetailedFanReviews  extends React.Component{\n    constructor(props) {\n        super(props)\n        this.displayReviewButton = this.displayReviewButton.bind(this);\n        this.displayReviews = this.displayReviews.bind(this);\n    }\n\n    displayReviewButton() {\n        const {moreReviewInfo, currentUser} = this.props;\n        if(moreReviewInfo) {\n            const userAlreadyReviewed = moreReviewInfo.find(review => review.userid === currentUser.id);\n            if(!userAlreadyReviewed) {\n                return <div><FanReviewModal buttonLabel='Write a Review!' className={`review-modal`} {...this.props}/></div> \n            }\n            return '';\n        }\n        return  <div><FanReviewModal buttonLabel='Write a Review!' className={`review-modal`} {...this.props}/></div> \n    } \n\n    displayReviews() {\n        const {moreReviewInfo} = this.props;\n        let reviews;\n        if(moreReviewInfo) {\n            const sortedReviews = moreReviewInfo.sort((a,b) => {\n                return parseFloat(a.id) - parseFloat(b.id)\n            })\n            reviews = \n                <div className='row'>\n                    {sortedReviews.map(review => \n                        <div className='col-lg-6 col-md-12' key={review.userid}>\n                            <ReviewContainer {...review} {...this.props} key={review.userid}/>\n                        </div>)\n                    }\n                    \n                </div>;\n            return reviews;\n        }\n        reviews = <p className='no-reviews'>No Fan Reviews At This Moment</p>\n        return reviews;\n    }\n\n    render() {\n        return (\n            <div className='DetailedFanReviews'>\n                <div className='review-btn'>\n                    <h3>FAN REVIEWS</h3>\n                    {this.displayReviewButton()}  \n                </div> \n                <hr/>\n                {this.displayReviews()}\n            </div>\n        )\n    }   \n}\n\nexport default DetailedFanReviews;","import React from 'react';\nimport './detailedMovieRatings.styles.scss';\nimport {\n    CircularProgressbarWithChildren,\n    buildStyles\n  } from \"react-circular-progressbar\";\n  import \"react-circular-progressbar/dist/styles.css\";\n  \nclass DetailedMovieRatings extends React.Component  {\n    constructor(props) {\n        super(props)\n        this.state = {\n            imdbRating: 0,\n            audienceRating: 0\n        }\n        this.calculateImdbRating = this.calculateImdbRating.bind(this);\n        this.calculateAudienceRating = this.calculateAudienceRating.bind(this);\n        this.calculateAudienceReviewLength = this.calculateAudienceReviewLength.bind(this);\n        this.calculatePluralTense = this.calculatePluralTense.bind(this);\n        this.determineRatingImage = this.determineRatingImage.bind(this);\n        this.timer = this.timer.bind(this)\n    }\n\n    componentDidMount() {\n        this.mounted = true;\n        this.timer()\n    }\n\n    componentWillUnmount() {\n        this.mounted = false;\n        clearTimeout(this.timer)\n    }\n\n    timer() {\n        const {imdbRating} = this.props;\n        const audienceScore = this.calculateAudienceRating()\n        setTimeout(() => {\n            (this.mounted &&  \n                this.setState({imdbRating: (parseFloat(imdbRating)/10 * 100).toFixed(0),\n                               audienceRating: audienceScore\n                }))   \n        }, 0)\n    }\n\n    calculateImdbRating() {\n        const {imdbRating} = this.props;\n        return (parseFloat(imdbRating)/10 * 100).toFixed(0);       \n    }\n\n    calculateAudienceRating() {\n        const {averageFanScore } = this.props;\n        if(averageFanScore) {\n            const percentageScore = (parseFloat(averageFanScore)/5 * 100).toFixed(0);\n            return percentageScore;\n        } \n        return 0;  \n    }\n\n    calculateAudienceReviewLength() {\n        const {moreReviewInfo} = this.props;\n        if(moreReviewInfo) {\n            const data = moreReviewInfo[0];\n            const { fanreviews } = data;\n            if(fanreviews.length === 1) {\n                return `${fanreviews.length}`\n            } \n            return `${fanreviews.length}`\n        }\n        return null;\n    }\n\n    calculatePluralTense() {\n        const {moreReviewInfo} = this.props;\n        if(moreReviewInfo) {\n            const data = moreReviewInfo[0];\n            const { fanreviews } = data;\n            if(fanreviews.length === 1) {\n                return `Fan Review`\n            } \n            return `Fan Reviews`\n        }\n        return null;\n    }\n\n    determineRatingImage() {\n        const {averageFanScore} = this.props;\n        let imgSrc;\n        if(averageFanScore) {\n            const score = (parseFloat(averageFanScore)/5 * 100).toFixed(0)\n            if(score >= 0 && score < 70) {\n                // https://www.flaticon.com/free-icon/dislike_1301458\n                // Freepik\n                imgSrc = 'https://www.flaticon.com/svg/static/icons/svg/1301/1301458.svg';\n            } else if (score >= 70 && score < 90) {\n                // https://www.flaticon.com/free-icon/like_1301447?term=like%201301447&page=1&position=1\n                // Freepik\n                imgSrc = 'https://www.flaticon.com/svg/static/icons/svg/1301/1301447.svg'\n            } else if (score >= 90) {\n                // https://www.flaticon.com/free-icon/star_616655?term=star&page=1&position=15\n                // Freepik\n                imgSrc = 'https://www.flaticon.com/svg/static/icons/svg/616/616655.svg'\n            } \n            return imgSrc\n        }\n        // https://www.flaticon.com/free-icon/conversation_942751?term=942751&page=1&position=1\n        // Freepik\n        imgSrc= 'https://www.flaticon.com/svg/static/icons/svg/942/942751.svg'\n        return imgSrc\n    }\n\n    render() {\n        const {moreReviewInfo, imdbVotes} = this.props;\n        return (\n            <div className='DetailedMovieRatings'>\n                <div className='white-card'>\n                    <div className='Critic'>\n                        <div className='rating'>\n                            <div style={{width: '110px', height: '110px'}}>\n                                <CircularProgressbarWithChildren \n                                    value={this.state.imdbRating}\n                                    strokeWidth= {11}\n                                    styles={buildStyles({\n                                        rotation: 0,\n                                        strokeLinecap: 'round',\n                                        pathTransitionDuration: 1,\n                                        pathColor: `rgba(240,138,93, ${this.state.imdbRating / 100})`,\n                                        textColor: '#f88',\n                                        trailColor: '#d6d6d6',\n                                        backgroundColor: '#3e98c7',\n                                    })}\n                                >\n                                    {/* https://www.flaticon.com/free-icon/imdb_889118?term=imdb&page=1&position=3 */}\n                                    {/* Pixel Perfect */}\n                                    <img style={{ width: 50, marginTop: 0}} src='https://www.flaticon.com/svg/static/icons/svg/889/889118.svg' alt=\"rating\" />\n                                    <div style={{ fontSize: 16, marginTop: -7 }}>\n                                        {this.state.imdbRating}%\n                                    </div>\n                                </CircularProgressbarWithChildren>\n                            </div>\n                        </div>\n                        <div className='label'><span className='text-bold'>{imdbVotes}</span>&nbsp;Votes</div>\n                    </div>\n                    <div className='Audience'>\n                        <div className='rating'>   \n                            <div style={{width: '110px', height: '110px'}}>\n                                <CircularProgressbarWithChildren \n                                    // value={this.calculateAudienceRating()}\n                                    value={this.state.audienceRating}\n                                    strokeWidth= {11}\n                                    styles={buildStyles({\n                                        rotation: 0,\n                                        strokeLinecap: 'round',\n                                        pathTransitionDuration: 1,\n                                        pathColor: `rgba(62, 152, 199, ${this.calculateAudienceRating() / 100})`,\n                                        textColor: '#f88',\n                                        trailColor: '#d6d6d6',\n                                        backgroundColor: '#3e98c7',\n                                    })}\n                                >\n                                    <img style={{ width: 38, marginTop: 0}} src={`${this.determineRatingImage()}`} alt=\"rating\" />\n                                    <div className='percent' style={{ fontSize: 16, marginTop: 0 }}>\n                                        {this.calculateAudienceRating() === 0 ? '' : this.calculateAudienceRating() + '%'}\n                                    </div> \n                                </CircularProgressbarWithChildren>\n                            </div>\n                        </div>\n                        <div className='label'>\n                            {moreReviewInfo ? <div><span className='text-bold-audience'>{this.calculateAudienceReviewLength() }</span> {this.calculatePluralTense()}</div>: 'No Reviews'}    \n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default DetailedMovieRatings;","import { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectIsMovieListLoading} from '../../redux/movie/movie.selectors'\nimport DetailedMovieRatings from './detailedMovieRatings.component';\nimport WithSpinner from '../withSpinner/withSpinner.component';\n\n\nconst mapStateToProps = createStructuredSelector({\n    isLoading: selectIsMovieListLoading\n})\n\nconst DetailedMovieRatingsContainer = connect(mapStateToProps)(WithSpinner(DetailedMovieRatings, '200px'))\n\nexport default DetailedMovieRatingsContainer;","import React from 'react';\nimport './detailedMovieInfo.styles.scss';\n\nconst DetailedMovieInfo = ({...props}) => {\n    const {Poster, Rated, Genre, Director, Actors, Plot, Production, Awards} = props;\n    return (\n        <div className='DetailedMovieInfo'>\n            <div className='title-img'>                  \n                <img src={Poster} alt=\"movie\" width='210px'/>\n            </div>\n            <div className='details'>\n                <p><span className='bold-text'> Directed By:</span> {Director}</p>\n                <p><span className='bold-text'> Genre:</span> {Genre}</p>\n                <p><span className='bold-text'>Production:</span>  {Production}</p>\n                <p><span className='bold-text'>Rated:</span>  {Rated}</p>\n                <p><span className='bold-text'>Awards:</span>  {Awards}</p>\n                <p><span className='bold-text'>Actors:</span>  {Actors}</p>\n                <p><span className='bold-text'>Plot:</span>  {Plot}</p>    \n            </div>\n        </div>\n    )\n}\n\nexport default DetailedMovieInfo;","import { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectIsMovieListLoading} from '../../redux/movie/movie.selectors'\nimport DetailedMovieInfo from'./detailedMovieInfo.component';\nimport WithSpinner from '../withSpinner/withSpinner.component';\n\nconst mapStateToProps = createStructuredSelector({\n    isLoading: selectIsMovieListLoading\n})\n\nconst DetailedMovieInfoContainer = connect(mapStateToProps)(WithSpinner(DetailedMovieInfo, '200px'))\n\nexport default DetailedMovieInfoContainer;","import React from 'react';\nimport './detailedMovie.styles.scss';\nimport DetailedFanReviews from '../detailedFanReviews/detailedFanReviews.component';\nimport DetailedMovieRatingsContainer from '../detailedMovieRatings/detailedMovieRatings.container';\nimport DetailedMovieInfoContainer from '../detailedMovieInfo/detailedMovieInfo.container';\n\nconst DetailedMovie = ({...props}) => {\n    return(\n        <div className='DetailedMovie'>\n            <DetailedMovieRatingsContainer {...props}/>\n            <DetailedMovieInfoContainer {...props}/>   \n            <DetailedFanReviews {...props}/>\n        </div>\n    )\n}\n\nexport default DetailedMovie;","import React from 'react';\nimport './singleMoviePage.styles.scss';\nimport { getReviewsByMovieIDStart, submitMovieReviewStart, updateReviewStart, deleteReviewStart} from '../../redux/movie/movie.actions';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectCurrentUser } from '../../redux/user/user.selectors';\nimport { selectSingleMoviePage} from '../../redux/movie/movie.selectors';\nimport DetailedMovie from '../../components/detailedMovie/detailedMovie.component';\n\n\nclass SingleMoviePage extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    componentDidMount() {\n        const {match: {params: {imdbID}},getReviewsByMovieIDStart, currentUser} = this.props;\n        const token = window.sessionStorage.getItem('token');\n        const reviewObj = {\n            userID: currentUser.id,\n            imdbID: imdbID,\n            token: token\n        }\n        getReviewsByMovieIDStart(reviewObj);\n    }\n\n    render(){\n        const { movieList} = this.props;\n        return(\n            <div className='SingleMoviePage'>\n                <div className='container'>\n                    <div className='row justify-content-center'>\n                        <div className='col-10'>\n                        {movieList.map( movie => {\n                            return <DetailedMovie {...movie} {...this.props} key={movie.imdbID}/>\n                        })}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getReviewsByMovieIDStart: (reviewObj) => dispatch(getReviewsByMovieIDStart(reviewObj)),\n        submitMovieReviewStart: (review) => dispatch(submitMovieReviewStart(review)),\n        updateReviewStart: (reviewObj) => dispatch(updateReviewStart(reviewObj)),\n        deleteReviewStart: (reviewObj) => dispatch(deleteReviewStart(reviewObj))\n    }\n}\n\nconst mapStateToProps = createStructuredSelector({\n    currentUser: selectCurrentUser,\n    movieList: selectSingleMoviePage\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleMoviePage);","import React from 'react';\nimport { Spinner } from 'reactstrap';\nimport './withSpinner.styles.scss';\n\nconst WithSpinner = (WrappedComponent, height) => {\n    const componentWithSpinner = ({isLoading, ...props}) => {\n        const {color} = props;\n        return isLoading ? (\n            <div className='PageWithSpinner' style={{height: height}}>\n                <Spinner style={{ width: '5rem', height: '5rem' }} color={color} />\n            </div>\n        ) : (\n            <WrappedComponent {...props}/>\n        )\n    }\n    return componentWithSpinner;\n}\n\nexport default WithSpinner;","import React from 'react';\nimport { FormGroup, Label, Input } from 'reactstrap';\n\nconst FormInput = ({id, label, name, type, placeholder, onChange, value, onKeyPress}) => {\n    return (\n        <div className='FormInput'>\n            <FormGroup>\n                <Label for={id}>{label}</Label>\n                <Input type={type} name={name} id={id} placeholder={placeholder} onChange={onChange} value={value} onKeyPress={onKeyPress}/>\n            </FormGroup>\n        </div>\n    )\n}\n\nexport default FormInput;","import React from 'react';\nimport './validationMessage.styles.scss';\n\nconst ValidationMessage = ({...props}) => {\n    const {colorCode, message} = props;\n    return (\n        <div className='ValidationMessage'>\n            {/* https://www.flaticon.com/free-icon/warning_1199619 */}\n            {/* Freepik */}\n            <img src=\"https://www.flaticon.com/svg/static/icons/svg/1199/1199619.svg\" alt=\"warning\"/>\n            <p style={{color: `${colorCode}`}}>{message}</p>\n        </div>\n    )\n}\n\nexport default ValidationMessage;"],"sourceRoot":""}